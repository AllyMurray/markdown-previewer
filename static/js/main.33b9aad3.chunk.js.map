{"version":3,"sources":["serviceWorker.ts","components/Editor.tsx","components/Previewer.tsx","App.tsx","data/markdownPlaceholder.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TextArea","styled","textarea","Editor","props","id","onChange","value","Preview","div","Previewer","dangerouslySetInnerHTML","__html","marked","markdown","Wrapper","App","useState","setMarkdown","event","target","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mLCTN,IAAMC,EAAWC,IAAOC,SAAV,KAcCC,EARiC,SAAAC,GAC9C,OACE,kBAACJ,EAAD,CAAUK,GAAG,SAASC,SAAUF,EAAME,UACnCF,EAAMG,Q,uMCTb,IAAMC,EAAUP,IAAOQ,IAAV,KAiBEC,EATuC,SAAAN,GACpD,OACE,kBAACI,EAAD,CACEH,GAAG,UACHM,wBAAyB,CAAEC,OAAQC,IAAOT,EAAMU,c,mOCdtD,IAAMC,EAAUd,IAAOQ,IAAV,KAyBEO,EAfgB,WAAO,IAAD,EACHC,mBClBF,8qCDiBK,mBAC5BH,EAD4B,KAClBI,EADkB,KAOnC,OACE,kBAACH,EAAD,KACE,kBAAC,EAAD,CAAQT,SANe,SAACa,GAC1BD,EAAaC,EAAMC,OAA+Bb,QAKVA,MAAOO,IAC7C,kBAAC,EAAD,CAAWA,SAAUA,M,eEnB3BO,EAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SLmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.33b9aad3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { FormEvent, FunctionComponent } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\ninterface IEditorProps {\r\n  onChange: (event: FormEvent<HTMLTextAreaElement>) => void;\r\n  value: string;\r\n}\r\n\r\nconst TextArea = styled.textarea`\r\n  box-sizing: border-box;\r\n  padding: 0.75em 2em;\r\n  width: 49%;\r\n`;\r\n\r\nconst Editor: FunctionComponent<IEditorProps> = props => {\r\n  return (\r\n    <TextArea id=\"editor\" onChange={props.onChange}>\r\n      {props.value}\r\n    </TextArea>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import React, { FunctionComponent } from \"react\";\r\n\r\nimport marked from \"marked\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface IPreviewerProps {\r\n  markdown: string;\r\n}\r\n\r\nconst Preview = styled.div`\r\n  background-color: #fff;\r\n  box-sizing: border-box;\r\n  overflow-y: scroll;\r\n  padding: 0 2em;\r\n  width: 49%;\r\n`;\r\n\r\nconst Previewer: FunctionComponent<IPreviewerProps> = props => {\r\n  return (\r\n    <Preview\r\n      id=\"preview\"\r\n      dangerouslySetInnerHTML={{ __html: marked(props.markdown) }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Previewer;\r\n","import React, { FormEvent, FunctionComponent, useState } from \"react\";\n\nimport Editor from \"./components/Editor\";\nimport Previewer from \"./components/Previewer\";\nimport { markdownPlaceholder } from \"./data/markdownPlaceholder\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  background: lightgray;\n  box-sizing: border-box;\n  display: flex;\n  height: 100%;\n  justify-content: space-between;\n  padding: 4em;\n  width: 100%;\n`;\n\nconst App: FunctionComponent = () => {\n  const [markdown, setMarkdown] = useState(markdownPlaceholder);\n\n  const handleEditorChange = (event: FormEvent<HTMLTextAreaElement>) => {\n    setMarkdown((event.target as HTMLTextAreaElement).value);\n  };\n\n  return (\n    <Wrapper>\n      <Editor onChange={handleEditorChange} value={markdown} />\n      <Previewer markdown={markdown} />\n    </Wrapper>\n  );\n};\n\nexport default App;\n","export const markdownPlaceholder = `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n  \r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n  \r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.com), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | ------------- \r\nYour content can | be here, and it | can be here...\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course, there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbered lists too.\r\n1. Use just 1s if you want! \r\n1. But the list goes on...\r\n- Even if you use dashes or asterisks.\r\n* And last but not least, let's not forget embedded images:\r\n\r\n![React Logo w/ Text](https://goo.gl/Umyytc)\r\n`;\r\n","import './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}